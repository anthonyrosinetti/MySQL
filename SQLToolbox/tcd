with preanalysis_data as (
select 
    cluster_name,
    format_date('%B', date) as month,
    allotted,
    case
      when is_agency = True then "Agence" else "Particulier"
    end as type_de_proprietaire,
    owner_retention,
    tenant_retention,
    case
      when requests_number >= 50 then "Plus de 50"
      when requests_number >= 20 then "Entre 20 et 49"
      when requests_number >= 15 then "Entre 15 et 19"
      when requests_number >= 10 then "Entre 10 et 14"
      else safe_cast(ifnull(requests_number, 0) as string)
    end as nombre_de_requetes,
    case
      when regexp_contains(institution_name, 'Studapart|reservation|Garantme|Location|Housing An') then 'Marketplace' else 'SaaS'
    end as saas_or_marketplace,
    sum(case
      when residence_name is null and (is_booked is null or is_booked = False) and (is_restricted is null or is_restricted = False) then current_availability
      when residence_name is not null and (is_booked is null or is_booked = False) and (is_restricted is null or is_restricted = False) then availabilities
    end) as disponibilites_reelles,
    sum(mobilities) as mobilities,
    sum(availabilities) as availabilities,
    sum(bookings) as bookings,
    sum(researches) as researches,
    sum(requests) as requests
from `big-query-328314.analysis_data.events_aggregated_202305`
where
  date_type = 'entry_date'
  and
  date between
    date_trunc(date_sub(current_date(), interval 1 month), month)
    and
    last_day(date_add(current_date(), interval 2 month), month)
group by
  1,2,3,4,5,6,7,8
),

ranked_data as (
select
  *,
  row_number() over (partition by cluster_name order by cluster_name, month, allotted, type_de_proprietaire, owner_retention, tenant_retention, nombre_de_requetes) as rn_cluster_name,
  row_number() over (partition by cluster_name, month order by month, allotted, type_de_proprietaire, owner_retention, tenant_retention, nombre_de_requetes) as rn_month,
  row_number() over (partition by cluster_name, month, allotted order by allotted, type_de_proprietaire, owner_retention, tenant_retention, nombre_de_requetes) as rn_allotted,
  row_number() over (partition by cluster_name, month, allotted, type_de_proprietaire order by type_de_proprietaire, owner_retention, tenant_retention, nombre_de_requetes) as rn_type_de_proprietaire,
  row_number() over (partition by cluster_name, month, allotted, type_de_proprietaire, owner_retention order by owner_retention, tenant_retention, nombre_de_requetes) as rn_owner_retention,
  row_number() over (partition by cluster_name, month, allotted, type_de_proprietaire, owner_retention, tenant_retention order by tenant_retention, nombre_de_requetes) as rn_tenant_retention,
  row_number() over (partition by cluster_name, month, allotted, type_de_proprietaire, owner_retention, tenant_retention, nombre_de_requetes order by nombre_de_requetes) as rn_nombre_de_requetes
from
  preanalysis_data
)

select 
    case when rn_cluster_name = 1 then cluster_name else null end as cluster_name_ranked,
    case when rn_month = 1 then month else null end as month_ranked,
    case when rn_allotted = 1 then allotted else null end as allotted_ranked,
    case when rn_type_de_proprietaire = 1 then type_de_proprietaire else null end type_de_proprietaire_ranked,
    case when rn_owner_retention = 1 then owner_retention else null end owner_retention_ranked,   
    case when rn_tenant_retention = 1 then tenant_retention else null end tenant_retention_ranked,
    case when rn_nombre_de_requetes = 1 then nombre_de_requetes else null end nombre_de_requetes_ranked,
    saas_or_marketplace,
    disponibilites_reelles,
    mobilities,
    availabilities,
    bookings,
    researches,
    requests
from ranked_data
order by
    cluster_name, rn_cluster_name, month, rn_month, allotted, rn_allotted, type_de_proprietaire, rn_type_de_proprietaire, owner_retention, rn_owner_retention, tenant_retention, rn_tenant_retention, nombre_de_requetes, rn_nombre_de_requetes
